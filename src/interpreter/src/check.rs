use crate::parsed::*;

#[derive(Debug, Clone)]
pub enum Type {
    Bool,
    Byte,
    Char,
    I64,
    U64,
    Isize,
    Usize,
    F64,
    Str,
    Rng(Box<Type>),
    Cptr(Box<Type>),
    Mptr(Box<Type>),
    Struct(usize),
}

pub fn deduce_type(expr: &ParsedExpr) -> Option<Type> {
    match expr.kind {
        ParsedExprKind::Assign(..) => None,
        ParsedExprKind::AssignAdd(..) => None,
        ParsedExprKind::AssignSub(..) => None,
        ParsedExprKind::AssignMul(..) => None,
        ParsedExprKind::AssignDiv(..) => None,
        ParsedExprKind::AssignMod(..) => None,
        ParsedExprKind::AssignShl(..) => None,
        ParsedExprKind::AssignShr(..) => None,
        ParsedExprKind::AssignBitOr(..) => None,
        ParsedExprKind::AssignBitAnd(..) => None,
        ParsedExprKind::AssignBitXor(..) => None,
        ParsedExprKind::AssignBitNot(..) => None,
        ParsedExprKind::Rng(_, _) => todo!(),
        ParsedExprKind::RngInclusive(_, _) => todo!(),
        ParsedExprKind::Eq(_, _) => todo!(),
        ParsedExprKind::Ne(_, _) => todo!(),
        ParsedExprKind::Lt(_, _) => todo!(),
        ParsedExprKind::Gt(_, _) => todo!(),
        ParsedExprKind::Le(_, _) => todo!(),
        ParsedExprKind::Ge(_, _) => todo!(),
        ParsedExprKind::Neg(_) => todo!(),
        ParsedExprKind::Add(_, _) => todo!(),
        ParsedExprKind::Sub(_, _) => todo!(),
        ParsedExprKind::Mul(_, _) => todo!(),
        ParsedExprKind::Div(_, _) => todo!(),
        ParsedExprKind::Mod(_, _) => todo!(),
        ParsedExprKind::Shl(_, _) => todo!(),
        ParsedExprKind::Shr(_, _) => todo!(),
        ParsedExprKind::BitOr(_, _) => todo!(),
        ParsedExprKind::BitAnd(_, _) => todo!(),
        ParsedExprKind::BitXor(_, _) => todo!(),
        ParsedExprKind::BitNot(_) => todo!(),
        ParsedExprKind::LogOr(_, _) => todo!(),
        ParsedExprKind::LogAnd(_, _) => todo!(),
        ParsedExprKind::LogNot(_) => todo!(),
        ParsedExprKind::Cast(_, _) => todo!(),
        ParsedExprKind::Call(_, _) => todo!(),
        ParsedExprKind::Index(_, _) => todo!(),
        ParsedExprKind::Member(_, _) => todo!(),
        ParsedExprKind::Object(_) => todo!(),
        ParsedExprKind::Id(_) => todo!(),
        ParsedExprKind::Literal(_) => todo!(),
    }
}
